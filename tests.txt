• Basic reading of a command line and breaking into its parts.
(the repeated "mysh2 %" is from typing Enter)
mspence@LAPTOP-LDMGD738:~/405cpsc/ShellProject$ ./myshell
mysh1 % not really right input
mysh: cmd not found: not
mysh2 %
mysh2 %
mysh2 %                           yeah
mysh: cmd not found: yeah
mysh3 %

• cd and pwd commands
mspence@LAPTOP-LDMGD738:~/405cpsc/ShellProject$ ./myshell
mysh1 % pwd
/home/mspence/405cpsc/ShellProject
mysh2 % cd ..
mysh2 % pwd
/home/mspence/405cpsc
mysh3 % cd ..
mysh3 % pwd
/home/mspence
mysh4 % cd /home/mspence/405cpsc/SignalLab
mysh4 % pwd
/home/mspence/405cpsc/SignalLab
mysh5 % cd /home
mysh5 % pwd
/home
mysh6 %

• fork() and exec() of command that are programs such as % cat file.txt
mspence@LAPTOP-LDMGD738:~/405cpsc/ShellProject$ ./myshell
mysh1 % cat simple_pipe.c
// Code from https://www.geeksforgeeks.org/pipe-system-call/
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#define MSGSIZE 16
char* msg1 = "hello, world #1";
char* msg2 = "hello, world #2";
char* msg3 = "hello, world #3";
int main() {
        char inbuf[MSGSIZE];     int p[2], i;     if (pipe(p) < 0)         exit(1);     write(p[1], msg1, MSGSIZE);     write(p[1], msg2, MSGSIZE);     write(p[1], msg3, MSGSIZE);     for (i = 0; i < 3; i++) {         read(p[0], inbuf, MSGSIZE);         printf("%s\n", inbuf);     }     return 0; }
mysh2 % ls
cat    ls.c      parent_child_pipe    redirect_stdout.c  simple_pipe     skipwhitespace.c
cat.c  makefile  parent_child_pipe.c  sh                 simple_pipe.c   starter_sh.c
ls     myshell   redirect_stdout      sh.c               skipwhitespace  tests.txt
mysh3 % date
Fri Apr  2 21:57:47 EDT 2021
mysh4 %

• Connect two commands with a pipe such as % cat file.txt | grep string
mspence@LAPTOP-LDMGD738:~/405cpsc/ShellProject$ ./myshell
mysh1 % ls | grep a
cat
cat.c
makefile
parent_child_pipe
parent_child_pipe.c
skipwhitespace
skipwhitespace.c
starter_sh.c
mysh2 % ls | rev
tac
c.tac
sl
c.sl
elifekam
llehsym
epip_dlihc_tnerap
c.epip_dlihc_tnerap
tuodts_tcerider
c.tuodts_tcerider
hs
c.hs
epip_elpmis
c.epip_elpmis
ecapsetihwpiks
c.ecapsetihwpiks
c.hs_retrats
txt.stset
mysh3 % cat makefile | rev
c.sl c.tac c.hs_retrats :lla
c.hs_retrats llehsym o- llaW- g- ccg

c.tac tac o- llaW- g- ccg

c.sl sl o- llaW- g- ccg

 :naelc
sl tac llehsym )MR($
mysh4 % ls | wc -l
18
mysh5 % ls | xargs wc
    52    196  11568 cat
    30     99    693 cat.c
   104    446  23360 ls
   264    868   6549 ls.c
     9     27    161 makefile
    32    476  22560 myshell
     5    137  12920 parent_child_pipe
    58    252   2075 parent_child_pipe.c
    17    111   8640 redirect_stdout
    40    119    965 redirect_stdout.c
    41    321  18288 sh
   535   1215   9546 sh.c
    11     97   8640 simple_pipe
    10     71    562 simple_pipe.c
     8     91   8632 skipwhitespace
    30    111    837 skipwhitespace.c
   264   1104  10267 starter_sh.c
   280   1139   8370 tests.txt
  1790   6880 154633 total
mysh6 %

• Redirect output such as % cat file.txt > outputfile.txt
mspence@LAPTOP-LDMGD738:~/405cpsc/ShellProject$ ./myshell
mysh1 % ls
cat    ls.c      parent_child_pipe    redirect_stdout.c  simple_pipe     skipwhitespace.c
cat.c  makefile  parent_child_pipe.c  sh                 simple_pipe.c   starter_sh.c
ls     myshell   redirect_stdout      sh.c               skipwhitespace  tests.txt
mysh2 % cat makefile > tester
mysh3 % cat tester
all: starter_sh.c cat.c ls.c
        gcc -g -Wall -o myshell starter_sh.c

        gcc -g -Wall -o cat cat.c

        gcc -g -Wall -o ls ls.c

clean:
        $(RM) myshell cat ls
mysh4 % date > date.txt
mysh5 % cat date.txt
Fri Apr  2 22:37:51 EDT 2021
mysh6 % ls > date.txt
mysh7 % cat date.txt
cat
cat.c
date.txt
ls
ls.c
makefile
myshell
parent_child_pipe
parent_child_pipe.c
redirect_stdout
redirect_stdout.c
sh
sh.c
simple_pipe
simple_pipe.c
skipwhitespace
skipwhitespace.c
starter_sh.c
tester
tests.txt
mysh8 %

• Redirect input such as % grep string < inputfile.txt
mspence@LAPTOP-LDMGD738:~/405cpsc/ShellProject$ ./myshell
mysh1 % grep e < makefile
all: starter_sh.c cat.c ls.c
        gcc -g -Wall -o myshell starter_sh.c
clean:
        $(RM) myshell cat ls
mysh2 % wc < sh.c
 535 1215 9546
mysh3 % cat < cat.c
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>
#include <errno.h>

void cat(char * input) {
        int file;
    if ((file = open(input, O_RDONLY)) < 0) { // open file
        perror("error with file open");
        exit(1);
    }
    char contents[2000];
    while (read(file, &contents, 1) > 0) // read file 1 char at a time
        write(1, &contents, 1);                  // print 1 char at a time
    close(file);
}

int main(int argc, char *argv[]) {
        if (argc == 1) {
                fprintf(stderr, "error: too few arguments\n");
                exit(1);
        } else {
                for(int i = 1; i < argc; i++)
                        cat(argv[i]);
        }
        return 0;
}
mysh4 %

• Processes Control-D to exit the shell.
mspence@LAPTOP-LDMGD738:~/405cpsc/ShellProject$ ./myshell
mysh1 %
mspence@LAPTOP-LDMGD738:~/405cpsc/ShellProject$ ./myshell
mysh1 % exit
mspence@LAPTOP-LDMGD738:~/405cpsc/ShellProject$ ./myshell
mysh1 % ls
cat    ls.c      parent_child_pipe    redirect_stdout.c  simple_pipe     skipwhitespace.c
cat.c  makefile  parent_child_pipe.c  sh                 simple_pipe.c   starter_sh.c
ls     myshell   redirect_stdout      sh.c               skipwhitespace  tests.txt
mysh2 %
mspence@LAPTOP-LDMGD738:~/405cpsc/ShellProject$

• Ability to run a program in the background such as % ls &
mspence@LAPTOP-LDMGD738:~/405cpsc/ShellProject$ ./myshell
mysh1 % ps
  PID TTY          TIME CMD
14366 tty2     00:00:01 bash
14875 tty2     00:00:00 myshell
14876 tty2     00:00:00 ps
mysh2 % cat &
mysh2 % ps
  PID TTY          TIME CMD
14366 tty2     00:00:01 bash
14875 tty2     00:00:00 myshell
14877 tty2     00:00:00 cat
14878 tty2     00:00:00 ps
mysh3 % sleep 90 &
mysh3 % ps
  PID TTY          TIME CMD
14366 tty2     00:00:01 bash
14875 tty2     00:00:00 myshell
14877 tty2     00:00:00 cat
14879 tty2     00:00:00 sleep
14880 tty2     00:00:00 ps
mysh4 % date &
mysh4 % Fri Apr  2 23:46:48 EDT 2021
ps
mysh5 %   PID TTY          TIME CMD
14366 tty2     00:00:01 bash
14875 tty2     00:00:00 myshell
14877 tty2     00:00:00 cat
14879 tty2     00:00:00 sleep
14882 tty2     00:00:00 ps
date &
mysh5 % Fri Apr  2 23:46:52 EDT 2021
ps
mysh6 %   PID TTY          TIME CMD
14366 tty2     00:00:01 bash
14875 tty2     00:00:00 myshell
14877 tty2     00:00:00 cat
14879 tty2     00:00:00 sleep
14883 tty2     00:00:00 date <defunct>
14884 tty2     00:00:00 ps


• Processes Control-C such that the shell does not terminate.
mspence@LAPTOP-LDMGD738:~/405cpsc/ShellProject$ ./myshell
mysh1 % ^Csignal_handler caught CTL-C

mysh1 % ^Csignal_handler caught CTL-C
^Csignal_handler caught CTL-C
^Csignal_handler caught CTL-C
^Csignal_handler caught CTL-C
^Csignal_handler caught CTL-C

mysh1 % gusty
mysh: cmd not found: gusty
mysh2 % ^Csignal_handler caught CTL-C
^Csignal_handler caught CTL-C
^Csignal_handler caught CTL-C

mysh2 % sleep 30
^Csignal_handler caught CTL-C
mysh3 %

• Implemented your own version of the ls program.
mspence@LAPTOP-LDMGD738:~/405cpsc/ShellProject$ ./myshell
mysh1 % ./ls
cat
cat.c
ls
ls.c
makefile
myshell
parent_child_pipe
parent_child_pipe.c
redirect_stdout
redirect_stdout.c
sh
sh.c
simple_pipe
simple_pipe.c
skipwhitespace
skipwhitespace.c
starter_sh.c
tests.txt
mysh2 % ./ls -l
-rwxr-xr-x 1 mspence mspence 11568 Apr  2 21:47 cat
-rw-r--r-- 1 mspence mspence   693 Apr  1 13:59 cat.c
-rwxr-xr-x 1 mspence mspence 23360 Apr  2 21:47 ls
-rw-r--r-- 1 mspence mspence  6549 Apr  1 10:23 ls.c
-rw-r--r-- 1 mspence mspence   161 Apr  1 10:35 makefile
-rwxr-xr-x 1 mspence mspence 22560 Apr  2 21:47 myshell
-rwxr-xr-x 1 mspence mspence 12920 Mar 31 21:01 parent_child_pipe
-rw-r--r-- 1 mspence mspence  2075 Mar 31 15:19 parent_child_pipe.c
-rwxr-xr-x 1 mspence mspence  8640 Mar 31 20:44 redirect_stdout
-rw-r--r-- 1 mspence mspence   965 Mar 31 15:19 redirect_stdout.c
-rwxr-xr-x 1 mspence mspence 18288 Mar 31 22:22 sh
-rw-r--r-- 1 mspence mspence  9546 Mar 31 15:19 sh.c
-rwxr-xr-x 1 mspence mspence  8640 Mar 31 20:52 simple_pipe
-rw-r--r-- 1 mspence mspence   562 Apr  2 00:05 simple_pipe.c
-rwxr-xr-x 1 mspence mspence  8632 Mar 31 21:11 skipwhitespace
-rw-r--r-- 1 mspence mspence   837 Mar 31 15:19 skipwhitespace.c
-rw-r--r-- 1 mspence mspence 10267 Mar 31 20:21 starter_sh.c
-rw-r--r-- 1 mspence mspence 10177 Apr  2 20:49 tests.txt
mysh3 % ./ls -a
.
..
.git
cat
cat.c
ls
ls.c
makefile
myshell
parent_child_pipe
parent_child_pipe.c
redirect_stdout
redirect_stdout.c
sh
sh.c
simple_pipe
simple_pipe.c
skipwhitespace
skipwhitespace.c
starter_sh.c
tests.txt
mysh4 % ./ls -al
drwxr-xr-x 1 mspence mspence  4096 Apr  2 21:47 .
drwxr--r-- 1 mspence mspence  4096 Apr  1 23:28 ..
drwxr-xr-x 1 mspence mspence  4096 Apr  2 21:38 .git
-rwxr-xr-x 1 mspence mspence 11568 Apr  2 21:47 cat
-rw-r--r-- 1 mspence mspence   693 Apr  1 13:59 cat.c
-rwxr-xr-x 1 mspence mspence 23360 Apr  2 21:47 ls
-rw-r--r-- 1 mspence mspence  6549 Apr  1 10:23 ls.c
-rw-r--r-- 1 mspence mspence   161 Apr  1 10:35 makefile
-rwxr-xr-x 1 mspence mspence 22560 Apr  2 21:47 myshell
-rwxr-xr-x 1 mspence mspence 12920 Mar 31 21:01 parent_child_pipe
-rw-r--r-- 1 mspence mspence  2075 Mar 31 15:19 parent_child_pipe.c
-rwxr-xr-x 1 mspence mspence  8640 Mar 31 20:44 redirect_stdout
-rw-r--r-- 1 mspence mspence   965 Mar 31 15:19 redirect_stdout.c
-rwxr-xr-x 1 mspence mspence 18288 Mar 31 22:22 sh
-rw-r--r-- 1 mspence mspence  9546 Mar 31 15:19 sh.c
-rwxr-xr-x 1 mspence mspence  8640 Mar 31 20:52 simple_pipe
-rw-r--r-- 1 mspence mspence   562 Apr  2 00:05 simple_pipe.c
-rwxr-xr-x 1 mspence mspence  8632 Mar 31 21:11 skipwhitespace
-rw-r--r-- 1 mspence mspence   837 Mar 31 15:19 skipwhitespace.c
-rw-r--r-- 1 mspence mspence 10267 Mar 31 20:21 starter_sh.c
-rw-r--r-- 1 mspence mspence 10177 Apr  2 20:49 tests.txt
mysh5 % ./ls ..
MainArgsLab
MemoryLab
ProcessAPILab
ScheduleProject
ShellProject
SignalLab
ls.c
mysh6 % ./ls /home/mspence/405cpsc/MemoryLab
heap
heap.c
kr_malloc.c
krmalloc
memory_layout
memory_layout.c
paging
paging.c
stack
stack.c
umalloc
umalloc.c
umalloc_orig.c
xv6_malloc.c
mysh7 % ./ls .. -la
drwxr-xr-x 1 mspence mspence  4096 Apr  2 21:47 .
drwxr--r-- 1 mspence mspence  4096 Apr  1 23:28 ..
drwxr--r-- 1 mspence mspence  4096 Apr  1 23:28 MainArgsLab
drwxr--r-- 1 mspence mspence  4096 Apr  1 23:28 MemoryLab
drwxr--r-- 1 mspence mspence  4096 Apr  1 23:28 ProcessAPILab
drwxr--r-- 1 mspence mspence  4096 Apr  1 23:28 ScheduleProject
drwxr--r-- 1 mspence mspence  4096 Apr  1 23:28 ShellProject
drwxr--r-- 1 mspence mspence  4096 Apr  1 23:28 SignalLab
-rw-r--r-- 1 mspence mspence  6549 Apr  1 10:23 ls.c
mysh8 % ./ls . .. /home/mspence/405cpsc/MemoryLab
.:
cat
cat.c
ls
ls.c
makefile
myshell
parent_child_pipe
parent_child_pipe.c
redirect_stdout
redirect_stdout.c
sh
sh.c
simple_pipe
simple_pipe.c
skipwhitespace
skipwhitespace.c
starter_sh.c
tests.txt

..:
MainArgsLab
MemoryLab
ProcessAPILab
ScheduleProject
ShellProject
SignalLab
ls.c

/home/mspence/405cpsc/MemoryLab:
heap
heap.c
kr_malloc.c
krmalloc
memory_layout
memory_layout.c
paging
paging.c
stack
stack.c
umalloc
umalloc.c
umalloc_orig.c
xv6_malloc.c
mysh9 %

• Implemented a second Linux program such as cat.
mspence@LAPTOP-LDMGD738:~/405cpsc/ShellProject$ ./myshell
mysh1 % ./cat
error: too few arguments
mysh2 % ./cat simple_pipe.c
// Code from https://www.geeksforgeeks.org/pipe-system-call/
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#define MSGSIZE 16
char* msg1 = "hello, world #1";
char* msg2 = "hello, world #2";
char* msg3 = "hello, world #3";
int main() {
        char inbuf[MSGSIZE];     int p[2], i;     if (pipe(p) < 0)         exit(1);     write(p[1], msg1, MSGSIZE);     write(p[1], msg2, MSGSIZE);     write(p[1], msg3, MSGSIZE);     for (i = 0; i < 3; i++) {         read(p[0], inbuf, MSGSIZE);         printf("%s\n", inbuf);     }     return 0; }
mysh3 % ./cat makefile simple_pipe.c cat.c
all: starter_sh.c cat.c ls.c
        gcc -g -Wall -o myshell starter_sh.c

        gcc -g -Wall -o cat cat.c

        gcc -g -Wall -o ls ls.c

clean:
        $(RM) myshell cat ls
// Code from https://www.geeksforgeeks.org/pipe-system-call/
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#define MSGSIZE 16
char* msg1 = "hello, world #1";
char* msg2 = "hello, world #2";
char* msg3 = "hello, world #3";
int main() {
        char inbuf[MSGSIZE];     int p[2], i;     if (pipe(p) < 0)         exit(1);     write(p[1], msg1, MSGSIZE);     write(p[1], msg2, MSGSIZE);     write(p[1], msg3, MSGSIZE);     for (i = 0; i < 3; i++) {         read(p[0], inbuf, MSGSIZE);         printf("%s\n", inbuf);     }     return 0; }
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>
#include <errno.h>

void cat(char * input) {
        int file;
    if ((file = open(input, O_RDONLY)) < 0) { // open file
        perror("error with file open");
        exit(1);
    }
    char contents[2000];
    while (read(file, &contents, 1) > 0) // read file 1 char at a time
        write(1, &contents, 1);                  // print 1 char at a time
    close(file);
}

int main(int argc, char *argv[]) {
        if (argc == 1) {
                fprintf(stderr, "error: too few arguments\n");
                exit(1);
        } else {
                for(int i = 1; i < argc; i++)
                        cat(argv[i]);
        }
        return 0;
}
mysh4 %
